<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Damien's blog</title>
    <description>And the art of under-engineering</description>
    <link>http://damien.la/</link>
    <atom:link href="http://damien.la/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 06 Nov 2021 09:30:04 -0700</pubDate>
    <lastBuildDate>Sat, 06 Nov 2021 09:30:04 -0700</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>Mnemonic Not Working - Recovering Lost Cryptocurrencies</title>
        <description>&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;

&lt;p&gt;A few people have asked for help recovering their passphrases after finding this article. I am happy to help but wanted to list a few resources I found that could be useful:&lt;/p&gt;

&lt;p&gt;You can reach out to &lt;a href=&quot;https://cryptoassetrecovery.com/&quot;&gt;Crypto Asset Recovery&lt;/a&gt; for help in crypto asset recovery.&lt;/p&gt;

&lt;p&gt;A wallet password and recovery tool: &lt;a href=&quot;https://github.com/gurnec/btcrecover&quot;&gt;btcrecover&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/gurnec/btcrecover/blob/master/docs/Seedrecover_Quick_Start_Guide.md&quot;&gt;python seed recover script&lt;/a&gt; from the above toolset that looks like it specifically addresses the issue of this article.&lt;/p&gt;

&lt;hr style=&quot;border-color: gray;&quot; /&gt;

&lt;p&gt;This post is long and covers my entire process, and I learned a lot of things on the way that are worth mentioning if you are interested in some technical crypto knowledge. Keep in mind there was definitely some trial and error and more direct processes possible (easy to see in hindsight). I use “word list”, “passphrase”, and “mnemonic” interchangeably and together below at times, so sorry for any confusion.&lt;/p&gt;

&lt;h1 id=&quot;background-story&quot;&gt;Background Story&lt;/h1&gt;

&lt;p&gt;So my friend texts me that her boyfriend had lost $10K worth of coins after updating his wallet device, a &lt;a href=&quot;https://www.ledgerwallet.com/products/ledger-nano-s&quot;&gt;Ledger Nano S&lt;/a&gt;. This is a USB hardware wallet that stores multiple types of coins “offline”. Technically, coins are never really stored because they only exist on blockchains, but the passwords to access them are what people secure away. I don’t know the details; something like… he was prompted to update the device, and &lt;a href=&quot;http://support.ledgerwallet.com/knowledge_base/topics/after-the-nano-s-update-i-cant-find-my-coins&quot;&gt;the default choice cleared out the existing wallet on it&lt;/a&gt;. All the coins appeared lost after hours of effort.&lt;/p&gt;

&lt;p&gt;I felt really bad for him and angry that Ledger doesn’t make these consequences absolutely clear (afaik). I’ve been learning a lot more about cryptocurrencies lately, so while I assumed it was a lost cause, I wanted to help out if I could. My first thought was to leave the device completely alone, akin to not making any changes to your computer files if you accidentally deleted stuff you want to recover. Probably not analogous but a safe move until Ledger support could be reached.&lt;/p&gt;

&lt;p&gt;After a little more conversation, I learned that he had written down the 24-word mnemonic passphrase for his wallet. These are automatically generated by the device for you. The 24 word passphrases are not the actual password themselves, but they can be converted into the actual passwords following a standard specification called &lt;a href=&quot;https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki&quot;&gt;BIP39&lt;/a&gt;. Two compounding issues though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It takes ~20 minutes to input the passphrase on the device, so any input mistakes are punishing.&lt;/li&gt;
  &lt;li&gt;What if the written down word list was wrong?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But he had the word list, so even with something written down wrong, it made me optimistic recovery was a possibility. I remembered reading a similar story somewhere, probably on Reddit, where someone had written down one of their 24 words incorrectly, and a friendly interneter wrote a script to find out which word was a mistake and solved it! Something like that anyway - I searched briefly and couldn’t find the story. In any case, I googled about restoring wallets from Ledger and passed on &lt;a href=&quot;http://support.ledgerwallet.com/knowledge_base/topics/how-to-restore-my-backup-without-a-ledger-wallet&quot;&gt;their support page link&lt;/a&gt; and a &lt;a href=&quot;https://www.ledgerwallet.com/support/bip39-standalone.html&quot;&gt;website that makes it easier to check if your 24 words are valid&lt;/a&gt;. At this point, I think they accepted the loss but had some hope.&lt;/p&gt;

&lt;p&gt;The next day they still hadn’t had luck and sent me over the 24 words to play with.&lt;/p&gt;

&lt;h1 id=&quot;finding-the-right-mnemonic-passphrase&quot;&gt;Finding the right mnemonic passphrase&lt;/h1&gt;

&lt;p&gt;Here’s the passphrase word list (not the original, but will work as an example):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fiscal bomb mutual one alley mistake unfair they proof unveil month prepare logic yard daring adapt eyebrow turn burst mandate win report maximum giraffe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aight, first things first, what does the &lt;a href=&quot;https://iancoleman.io/bip39/&quot;&gt;Mnemonic Code Converter / BIP39 Tool&lt;/a&gt; by &lt;a href=&quot;https://github.com/iancoleman/bip39&quot;&gt;Ian Coleman&lt;/a&gt; (and used by Ledger) say when you enter this passphrase?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img style=&quot;border: lightgray; border-width: thin; border-style: solid;&quot; src=&quot;/img/mnemonic/invalid-mnemonic.png&quot; alt=&quot;invalid mnemonic&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, it’s clear the provided passphrase is wrong. I don’t know the details of how, but the last word in a BIP39 word sequence (whether 12 words, 24 words, or other multiples of 3) is the &lt;b&gt;checksum&lt;/b&gt;. The checksum tells you that the rest of its preceding sequence is valid, so if you picked 24 random words from &lt;a href=&quot;https://github.com/bitcoin/bips/tree/master/bip-0039&quot;&gt;2048 words of the BIP 39 spec&lt;/a&gt;, they’d likely be an invalid sequence. FYI, everywhere I read strongly recommended you do not generate your own passphrase, and let it be generated for you. Essentially, one that you try to create will never be as entropic, or random, as one algorithmically generated for you.&lt;/p&gt;

&lt;p&gt;Anywayyyy, I first asked them if they had any ideas of words that could be wrong, like copied over incorrectly, hard to read, or written down by row instead of by column. In the original word list, the word “rigid” appeard twice and at the top of both columns on their recovery phrase card (card pictured below).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/mnemonic/ledger-recovery-phrase-card.jpg&quot; alt=&quot;ledger recovery phrase card&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BIP39 allows repeated words, so the double “rigid” wasn’t necessarily an issue. But better than going off of nothing at all I guess.&lt;/p&gt;

&lt;p&gt;Say we can try substituting one of those “rigid”s with other words. But that’s already 2048 possibilities…not something you want to do manually, especially since it’s likely a dead end. Well, easy enough to write a script to produce the passphrases.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# an array of the 2048 word list&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bip39_word_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(
  abandon
  ability
  able
  about
  above
  absent
  absorb
  ...
)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# array of our incorrect 24 word phrase&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(fiscal bomb mutual ... )&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# generate test passphrases by replacing each word in the original passphrase with all 2048 words&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;bip39_word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;passphrase_copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;passphrase_copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_word&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of just replacing the “rigids”, I figured I’d just make loops to generate all 24*2048 possible test passphrases. That’s 49,152 in total. This is testing the “best case” scenario, where only 1 word in the passphrase is incorrect. And only the first step. If it’s more than 1 word, or if the order of the words is wrong, then we’ll have a much bigger problem to deal with.&lt;/p&gt;

&lt;p&gt;As we learned earlier, the last word in these test passphrases acts a checksum, and hopefully the majority of the 49,512 are not valid mnemonics at all. How do we test that automatedly? I looked into Ian’s javascript code to learn more and then found the &lt;a href=&quot;https://github.com/sreekanthgs/bip_mnemonic&quot;&gt;Ruby gem BipMnemonic&lt;/a&gt;. Let’s expand the script to check for validity.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;valid_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# generate and validate test passphrases by replacing each word in the original passphrase with all 2048 words&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;bip39_word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;passphrase_copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;passphrase_copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_word&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;passphrase_copy_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase_copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# throws an error if the mnemonic is invalid&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;BipMnemonic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_entropy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;mnemonic: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passphrase_copy_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;valid_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SecurityError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ahhhh, only 199 valid combinations! 0.4%, that’s kind of interesting on its own? I wonder if it’s a similar percentage if I randomly selected 24 words. That’d be really easy to check right now…real shame.&lt;/p&gt;

&lt;p&gt;Ok, now what. Say we did have the correct passphrase. Then we should be able to generate the private key and access to the wallet. Is there an app (software wallet) that I can easily throw these test phrases in? That’d make things easy. Repetitive, but easy. If one allowed bulk checking, that’d be really nice. Don’t really remember what the search results were. I feel like there may have been an app but that I’d seen they supported Bitcoin specifically/only, and my impression was that his wallet had other alt coins. And definitely didn’t want to manually try 199 phrases. I didn’t understand how a wallet could have more than 1 type of coin in it. My understanding was that a wallet is really just a corresponding public and private key and a blockchain address. Well, looks like that isn’t the case here, and we’ll figure this out later.&lt;/p&gt;

&lt;p&gt;No matter – if we can generate addresses at least, we can check for transactions on the blockchain. If we found a transaction, that means the mnemonic passphrase it came from would be the right one. Transactions are all completely public, and various websites make it easy to check, e.g. &lt;a href=&quot;https://blockchain.info/&quot;&gt;blockchain.info&lt;/a&gt;. Luckily I also found a &lt;a href=&quot;https://www.reddit.com/r/Bitcoin/comments/4izawd/i_wrote_down_the_trezor_recovery_seed_incorrectly&quot;&gt;Reddit post where someone posted their broken mnemonic&lt;/a&gt; for a bitcoin wallet, and another redditor figured out the issue and posted some info (not the same story I referred to at the beginning of this post). This could be useful as a reference because it’s a real wallet with transactions you can check.&lt;/p&gt;

&lt;p&gt;Using the Mnemonic Code Converter for the Reddit post passphrase &lt;code&gt;honey relief scale kite dose lyrics they middle globe exhaust smooth galaxy horror ensure grape way gift embody spring cupboard horror hurt image swift&lt;/code&gt;, we get all sorts of data: seed, coin, root key, derivation path, derived addresses…what is all this crap. Why are there so many addresses? Here are some screenshots.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img style=&quot;border: lightgray; border-width: thin; border-style: solid;&quot; src=&quot;/img/mnemonic/reddit/seed.png&quot; alt=&quot;mnemonic seed&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img style=&quot;border: lightgray; border-width: thin; border-style: solid;&quot; src=&quot;/img/mnemonic/reddit/keys.png&quot; alt=&quot;mnemonic extended keys&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img style=&quot;border: lightgray; border-width: thin; border-style: solid;&quot; src=&quot;/img/mnemonic/reddit/derived-addresses.png&quot; alt=&quot;mnemonic derived addresses&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, if we &lt;a href=&quot;https://blockchain.info/xpub/xpub6CzbQ5BLF2mngsMXijEfdvL5DQZZqmD4X8H5kxH8GzpRQVLk1bX8ebsknaUinwRZug3rqJ2vqogYc52rNjVhXRxpz87W9yPfJapbhdrVaEy&quot;&gt;check the Account Extended Public Key on blockchain.info&lt;/a&gt;, we see some transactions! Note that some of those addresses on the left match the derived addresses above.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img style=&quot;border: lightgray; border-width: thin; border-style: solid;&quot; src=&quot;/img/mnemonic/reddit/blockchain-extended-key.png&quot; alt=&quot;blockchain extended key&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img style=&quot;border: lightgray; border-width: thin; border-style: solid;&quot; src=&quot;/img/mnemonic/reddit/blockchain-transactions.png&quot; alt=&quot;blockchain transactions&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool, so if we can generate whatever these &lt;i&gt;accounted extended public keys&lt;/i&gt; are for our 199 passphrases, we can check those online. Maybe there is a way to check in bulk. For now, let’s just see if we can generate the keys. Could also be a fun exercise to download the entire Bitcoin blockchain and figure out how to read it myself…another time perhaps.&lt;/p&gt;

&lt;p&gt;I looked back at Ian’s javascript code to see how the Mnemonic Code Converter worked. Lots of jumping around functions and some unfamiliar javascript stuff. Pleeassseeee let there be a Ruby gem I can use. Wooo, looks like this &lt;a href=&quot;https://github.com/GemHQ/money-tree&quot;&gt;MoneyTree gem&lt;/a&gt; might work.&lt;/p&gt;

&lt;p&gt;Not sure what all this stuff means. Let’s try to make one of these Master Nodes. The example is &lt;code&gt;@master = MoneyTree::Master.new seed_hex: &quot;000102030405060708090a0b0c0d0e0f&quot;&lt;/code&gt;. Aight, we need a &lt;code&gt;seed_hex&lt;/code&gt; for each mnemonic passphrase, and BipMnemonic lets us do that: &lt;code&gt;BipMnemonic.to_seed(mnemonic: passphrase)&lt;/code&gt;. Let’s try using the Reddit post.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;seed_hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BipMnemonic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;mnemonic: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'honey relief scale kite dose lyrics they middle globe exhaust smooth galaxy horror ensure grape way gift embody spring cupboard horror hurt image swift'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MoneyTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;seed_hex: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed_hex&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;37757ee9da759364544a655593057c991958e6014fa8ebfe242bc11f5c8373b3735b0f0e1e731c3355efe4bc09cdbf65ba5ca79af1061a5847c6a6528d8d5d4a&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#&amp;lt;MoneyTree::Master:0x007ff651ebea70 @depth=0, @index=0, ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now there is a method available on the master node object we can try: &lt;code&gt;@master.to_bip32(:private)&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xprv9s21ZrQH143K3yx2Tn5J3G2mYTpUnjrdQUkwXZxPiid5eJgWYKYQfpDCMDWQqfq8whGfts9q5txq6ERRz3rX67GgFzAfv9E3Re4ecDoG3FF&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aha, that matches the BIP32 Root Key. We’re getting somewhere. Ok, we can do the same thing to find the public key, but if you try searching the result on blockchain, nada. We gotta figure out this derivation path stuff to get that &lt;i&gt;account extended public key&lt;/i&gt;. MoneyTree let’s you create child nodes off the master, and you specify a &lt;b&gt;BIP32 Derivation Path&lt;/b&gt;. Let’s try whatever this &lt;code&gt;m/44'/0'/0'/0&lt;/code&gt; thing is.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;node_for_path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m/44'/0'/0'/0&quot;&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_bip32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xpub6EtUqtb2dbwBrv8gdqvppvbu3MwNkSfKvd3duxQdyErmHm6PUq9P6AwqtaZp24oB12eEyqkbGnnJeR2JAVkossGdgghx7KhxyGQj6hNvVpX&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the &lt;i&gt;BIP32 Extended Public Key&lt;/i&gt;, which does not give results on blockchain.info. Quick googling didn’t reveal any sites that let you search using this key (not that there isn’t one). How do we get &lt;i&gt;account extended public key&lt;/i&gt;…?&lt;/p&gt;

&lt;p&gt;Looking back at those screenshots, we see the derived addresses. Let’s try to generate those. For each address, we see a path on the left. Looks like the derivation path from before but with an extra number at the end &lt;code&gt;m/44'/0'/0'/0/0&lt;/code&gt;, &lt;code&gt;m/44'/0'/0'/0/1&lt;/code&gt;, &lt;code&gt;m/44'/0'/0'/0/2&lt;/code&gt;, etc. I’m starting to understand! Ok, so these derived addresses are really just nodes further down some tree, and the depths are separated by a “/”. Not sure what those apostrophes mean, but maybe doesn’t matter. &lt;a href=&quot;https://github.com/GemHQ/money-tree#values-of-i-and-i-prime&quot;&gt;Learn more about them here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;node_for_path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m/44'/0'/0'/0/0&quot;&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_address&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1BoTRHKRU4TLGdBpZ8Yjf1hXEmtxjdgb6v&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well well, that’s the first derived address. And a &lt;a href=&quot;https://blockchain.info/address/1BoTRHKRU4TLGdBpZ8Yjf1hXEmtxjdgb6v&quot;&gt;wallet address is definitely easy to check&lt;/a&gt;. I asked about what coins were on the wallet, and he actually did have some bitcoin (as well as Stratis, Dash, and Litecoin). Hmmm, if we can check these in bulk, and we see any transactions, then we have a hit! Butttt…there are tons of possible derived addresses for each passphrase. &lt;a href=&quot;https://bitref.com&quot;&gt;Bitref.com&lt;/a&gt; allows bulk checking (found it from some stackoverflow post). There’s nothing stopping someone (like your wallet provider) from starting at &lt;code&gt;m/44'/0'/0'/0/999&lt;/code&gt; instead of &lt;code&gt;m/44'/0'/0'/0/0&lt;/code&gt;. Let’s just hope not, and we’ll try the first three nodes. Update the script to generate all of this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_keys_from_seed_hex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed_hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase_copy_string&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MoneyTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;seed_hex: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed_hex&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;node_for_path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m/44'/0'/0'/0&quot;&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@account_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;node_for_path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m/44'/0'/0'&quot;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;bip32_public_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_bip32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;bip32_private_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_bip32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:private&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;account_extended_public_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@account_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_bip32&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;first_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;node_for_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m/44'/0'/0'/0/0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_address&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;second_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;node_for_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m/44'/0'/0'/0/1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_address&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;third_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;node_for_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m/44'/0'/0'/0/2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_address&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@addresses_to_lookup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_address&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@addresses_to_lookup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_address&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@addresses_to_lookup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;third_address&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# just to get some visual feedback of all this stuff&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;account public key: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account_extended_public_key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;public  key: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bip32_public_key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;private key: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bip32_private_key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@addresses_to_lookup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;bip39_word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;passphrase_copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;passphrase_copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_word&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;passphrase_copy_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase_copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;seed_hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BipMnemonic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;mnemonic: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passphrase_copy_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;get_keys_from_seed_hex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed_hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase_copy_string&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SecurityError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note: Above you can see &lt;code&gt;account_extended_public_key&lt;/code&gt; included. At some point I figured out the &lt;i&gt;account extended public key&lt;/i&gt; was one parent up in the derivation path. The ‘44’ corresponds to BIP44, and the first ‘0’ indicates Bitcoin. For Litecoin, that number is 2, and the BIP44 derivation would be “m/44’/2’/0’/0”.&lt;/p&gt;

&lt;p&gt;That’s 597 addresses to check. Bitref didn’t respond when trying 200 at a time, but 100 worked. &lt;code&gt;@addresses_to_lookup[0..100].join(&quot;+&quot;)&lt;/code&gt;. No hits. 101-200….no hits. 401-500 no hits. I lost a lot of hope at this point. 501-600….woahhhh wait, is that a legit transaction??&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img style=&quot;border: lightgray; border-width: thin; border-style: solid;&quot; src=&quot;/img/mnemonic/reddit/bitref-transaction.png&quot; alt=&quot;bitref transactions&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I got really excited at this point and figured this meant one of the test passphrases was correct. Unfortunately Bitref doesn’t put the address along side the transactions (didn’t check the source). Not the most efficient, but I just did a manual binary search (checking the addresses between 500-550, then 500-525, etc. until I could narrow it down to at least 1 of the 3 transactions that were found. The 4th transaction, the one on top, was the coins getting moved to a new wallet (after this recovery). Ok, got 1. Now let’s update the &lt;code&gt;:get_keys_from_seed_hex&lt;/code&gt; method and print out the passphrase when we get an address match.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_keys_from_seed_hex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed_hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase_copy_string&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MoneyTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;seed_hex: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed_hex&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;first_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;node_for_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m/44'/0'/0'/0/0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_address&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;second_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;node_for_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m/44'/0'/0'/0/1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_address&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;third_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;node_for_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m/44'/0'/0'/0/2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_address&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@addresses_to_lookup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_address&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@addresses_to_lookup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_address&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@addresses_to_lookup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;third_address&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# an example value here would be 1BoTRHKRU4TLGdBpZ8Yjf1hXEmtxjdgb6v&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;address_to_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;removed for privacy&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address_to_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address_to_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;third_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address_to_check&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase_copy_string&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So I run that, and an out pops the matching passphrase:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fiscal bomb mutual one alley mistake unfair they roof unveil month prepare logic yard daring adapt eyebrow turn burst mandate win report maximum giraffe&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s our example passphrase from the beginning, but what changed? &lt;b&gt;Not “proof”…it should be “roof”&lt;/b&gt; !! I didn’t want to create my own wallet to check or invade privacy or anything, so I sent off the fix to the coin owner to try it out himself. SUCCESS. He got all his coins back – $10,000 worth – and looks like he moved them to a new wallet.&lt;/p&gt;

&lt;h1 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h1&gt;

&lt;p&gt;That was a really fun problem to try to solve and how awesome is it that it worked out?? It was lucky that only 1 word was wrong, but on the other hand, it doesn’t seem likely that several transcription errors would have happened when hand copying the passphrase.&lt;/p&gt;

&lt;p&gt;Knowing the solution, it’s easy to look back and realize that checking for pairs of words that are very similar would have solved this a lot faster. Still, got to learn about how all this works and how HD Wallets have this tree structure that allows for basically many wallets all stored in one master wallet. &lt;a href=&quot;https://en.bitcoin.it/wiki/Deterministic_wallet&quot;&gt;Learn more about HD Wallets here&lt;/a&gt; and &lt;a href=&quot;https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki&quot;&gt;here too&lt;/a&gt;. All in all, this took about 5-6 hours.&lt;/p&gt;

&lt;p&gt;For anyone in the future that runs into this same issue, let’s generate that pairs list, so that can be tried first. This is 2048^2 = 4,194,304 checks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;word_pairs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bip39_word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;bip39_word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Reject if the same word&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Check if words are similar lengths, otherwise garment matches arm&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;first_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 

        &lt;span class=&quot;c1&quot;&gt;# Check if compared words contain the other, like proof contains roof&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;first_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;word_pairs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_by&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          
          &lt;span class=&quot;c1&quot;&gt;# Check if all but 1 letter match up&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;  

            &lt;span class=&quot;n&quot;&gt;word_pairs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# remove duplicates and sort alphabetically&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word_pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uniq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort!&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;word_pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word_pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;', '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;word_pairs.count
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;505&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve made the &lt;a href=&quot;https://gist.github.com/dam13n/ccbaf7404f2d5a33f5316ed5f7a51d88&quot;&gt;word pairs list available here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;issue, tissue
item, kite
item, stem
just, must
keen, keep
kick, sick
kind, mind

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
save, wave
sea, seat
seed, seek
sell, tell
ship, whip
shoe, shop
side, tide
side, wide
sing, wing
ski, skin
slab, slam&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And for further reading, a &lt;a href=&quot;https://medium.freecodecamp.org/lets-enhance-how-we-found-rogerkver-s-1000-wallet-obfuscated-private-key-8514e74a5433&quot;&gt;much cooler – and more techincal! - story here&lt;/a&gt; where they reconstruct a private key from a partial/blurred QR code and a few other hints.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 05:00:00 -0700</pubDate>
        <link>http://damien.la/2017/09/10/mnemonic</link>
        <guid isPermaLink="true">http://damien.la/2017/09/10/mnemonic</guid>
        
        
      </item>
    
      <item>
        <title>Ruby 2.3.0 Highlights</title>
        <description>&lt;p&gt;I’ve been watching some great RubyConf talks recently, and Matz (creator of Ruby) is always fun to watch. He went over some new features in Ruby 2.3.0, so I thought I’d re-report them here for everyone. &lt;a href=&quot;https://www.youtube.com/watch?v=LE0g2TUsJ4U&quot;&gt;This is the talk I got them from&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;enumerablegrep_v&quot;&gt;Enumerable#grep_v&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; is a Unix command for pattern matching. For example, if I wanted to check my history for a recent ssh IP address, I could try something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So &lt;code&gt;grep -v&lt;/code&gt; is the inverse - you’ll get all the results that &lt;em&gt;don’t&lt;/em&gt; match. I am imagining it is used like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c@hotmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;grep_v&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/.+gmail.+/&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&quot;c@hotmail.com&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;hashfetch_values&quot;&gt;Hash#fetch_values&lt;/h2&gt;

&lt;p&gt;Stricter version of Hash#values_at. Check out the &lt;a href=&quot;https://bugs.ruby-lang.org/issues/10017&quot;&gt;feature request here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;numericpositive-numericnegative&quot;&gt;Numeric#positive? Numeric#negative?&lt;/h2&gt;

&lt;p&gt;Longer than &lt;code&gt;&amp;gt; 0&lt;/code&gt; !&lt;/p&gt;

&lt;h2 id=&quot;hash-comparisons----&quot;&gt;Hash comparisons: &lt;code&gt;&amp;lt;=, &amp;lt;, &amp;gt;=, &amp;gt;&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This seems odd, but it &lt;code&gt;A &amp;gt;= B&lt;/code&gt; is another way of asking if hash A contain all of B and possibly more.&lt;/p&gt;

&lt;h2 id=&quot;hashto_proc&quot;&gt;Hash#to_proc&lt;/h2&gt;

&lt;p&gt;Here’s an example straight from the talk:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [2, 4, 6]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;did-you-mean&quot;&gt;Did-you-mean&lt;/h2&gt;

&lt;p&gt;Just a ruby interpreter helper for typos on methods. Doesn’t seem very useful to me.&lt;/p&gt;

&lt;h2 id=&quot;frozen-string-crap&quot;&gt;Frozen string crap&lt;/h2&gt;

&lt;p&gt;Strings will be frozen by default I think. This frees up space or something. Feels inconvenient, so I hope the gains are worth it!&lt;/p&gt;

&lt;h2 id=&quot;safe-navigation-with-&quot;&gt;Safe navigation with &lt;code&gt;&amp;amp;.&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Look, it’s a guy sitting on the floor staring at a dot! The ‘lonely operator’! This one is really useful:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# instead of this to avoid pesky nils&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Matz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# you can do this now&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beautiful.&lt;/p&gt;

&lt;h2 id=&quot;array-hashdig&quot;&gt;Array, Hash#dig&lt;/h2&gt;
&lt;p&gt;This is also another very useful feature in Ruby 2.3. It’s unsafe to check arrays or hashes at depth for values if you aren’t sure they’ll be there, because you’ll get an error once a nil comes up. Now, there’s a safe &lt;code&gt;dig&lt;/code&gt; method available, and it’s not unsimilar to the aforementioned &lt;code&gt;&amp;amp;.&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# instead of this risky query&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# now we can&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Another really common need, at least for me, is the opposite of this &lt;code&gt;dig&lt;/code&gt; which I’m calling &lt;code&gt;bury&lt;/code&gt;. I actually tweeted to &lt;a href=&quot;https://twitter.com/yukihiro_matz&quot;&gt;@Matz&lt;/a&gt; about this feature request and posted to the &lt;a href=&quot;https://bugs.ruby-lang.org/issues/11747&quot;&gt;Ruby lang redmine forum thing&lt;/a&gt;. &lt;code&gt;bury&lt;/code&gt; allows you to insert an object at an arbitrary depth into an array or hash:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bury&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Matz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is not part of Ruby!!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My feature request actually got a few comments!&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Dec 2015 04:00:00 -0800</pubDate>
        <link>http://damien.la/2015/12/02/ruby2.3.0</link>
        <guid isPermaLink="true">http://damien.la/2015/12/02/ruby2.3.0</guid>
        
        
      </item>
    
      <item>
        <title>Some thoughts on the Hyperloop concept</title>
        <description>&lt;p&gt;The recent announcement from SpaceX about hosting a &lt;em&gt;Hyperloop&lt;/em&gt; competition got me thinking about the concept again. I read Elon Musk’s white paper when it was released and some engineering challenges came to mind. I perused through it this week, and here are some things that seem problematic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How the heck would a capsule switch tracks (or tubes) such as when at a station? Would a “one-in, one-out” be forced?&lt;/li&gt;
  &lt;li&gt;How is banking controlled when navigating through curves or maybe encountering fluctuations in air density in the tube? Sounds like a fun bobsled ride.&lt;/li&gt;
  &lt;li&gt;Is it unnecessarily inefficient to only have 1 track per tube?&lt;/li&gt;
  &lt;li&gt;How do you stop these things in emergencies?
*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While a default design of cyndrical tubes and a clyndrical-ish capsule made sense from a simplicity and manufacturing cost and easy point of view, I wanted to take a step back and wonder if other geometries could be suitable.&lt;/p&gt;

&lt;p&gt;I imagined&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Update 2017: So I started writing this post a long time ago and never finished it. I’ll just post the image I drew up for it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;/img/hyperloop/hyperloop.png&quot; alt=&quot;hyperloop wing design&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 23 Jun 2015 05:00:00 -0700</pubDate>
        <link>http://damien.la/2015/06/23/hyperloop</link>
        <guid isPermaLink="true">http://damien.la/2015/06/23/hyperloop</guid>
        
        
      </item>
    
      <item>
        <title>Sending images with your Ruby / Rails API - Receive them in RubyMotion</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;Rails Side&lt;/h2&gt;

&lt;p&gt;For an iOS game I’ll eventually release, I store images for each “story” on a Story model. &lt;code&gt;image_file&lt;/code&gt; is one of the attributes and it’s just a string of the image’s file name. There’s a before_save callback that stores a Base64 binary version of the image on that model’s instance.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;before_save&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:generate_image_binaries&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;file_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/app/assets/images/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_file&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\n/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;RubyMotion Side&lt;/h2&gt;

&lt;p&gt;After receiving a “Story” object in RubyMotion through an API call, I initialize an NSData object with the Base64 encoded image. These are stored with NSDefaults. I’m using a globally variable here. Usually recommended blah blah blah.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image-0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initWithBase64EncodedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;options: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This app uses &lt;a href=&quot;http://rubymotionquery.com/&quot;&gt;RubyMotion Query (RMQ)&lt;/a&gt;. This is an awesome library. Recently, RMQ and &lt;a href=&quot;https://github.com/clearsightstudio/ProMotion&quot;&gt;ProMotion&lt;/a&gt;(and more) combined as &lt;a href=&quot;https://github.com/infinitered/redpotion&quot;&gt;RedPotion&lt;/a&gt;. Haven’t tried that yet, but I’m excited to. Anyway, later when showing Story views, I set the image in RMQ. It shouldn’t be too hard to adapt the code below if you aren’t using RMQ. The part that matters is &lt;code&gt;UIImage.imageWithData&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;story_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;imageWithData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'image-0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ratio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;height&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contentMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UIViewContentModeScaleAspectFit&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;t: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;l: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;w: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;h: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ratio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;background_color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blackColor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Sun, 24 May 2015 05:00:00 -0700</pubDate>
        <link>http://damien.la/2015/05/24/image-binaries-rails-api</link>
        <guid isPermaLink="true">http://damien.la/2015/05/24/image-binaries-rails-api</guid>
        
        
      </item>
    
      <item>
        <title>Making a Steel Flower for the Mom</title>
        <description>&lt;p&gt;I was inspired by &lt;a href=&quot;http://www.reddit.com/r/DIY/comments/2ozwb8/copper_flowers_just_in_time_for_the_holidays/&quot;&gt;this Reddit post earlier this year&lt;/a&gt; and made a copper flower for my girlfriend. It turned out really well even though as a first try. I had since made another as a wedding gift and decided to make a steel version for my mom.&lt;/p&gt;

&lt;p&gt;Steel is less malleable, but some plated steel sheets I found at a local hardware shop were really thin and seemed bendy enough. Steel’s also cheaper than copper and alumnimum, and I could go for that all silver-color look. Read through this post before you choose steel though.&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Final Product&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/flower/speaker.jpg&quot; alt=&quot;metal flower&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It turned out pretty well I think!&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Materials and Equipment Needed&lt;/h2&gt;

&lt;p&gt;There’s a few different ways to go about creating these, but you can do it with minimal tools! The only electric tools you need are a drill and a Dremel, which is optional, but really helps.&lt;/p&gt;

&lt;p&gt;Here’s some of the stuff:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/flower/supplies.jpg&quot; alt=&quot;metal flower supplies&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Three 3”x3” squares. Cut those beforehand using those metal plate shears you see. Those happen to be “right-handed” I think. In hindsight, I’m thinking the straight-cut ones would have worked better. If you’re at a hardware store, they’re labeled and generally visually show a curved path left or right or a straight path to indicate the type of cut they do. Either way, the ones I got worked well enough. The “plated steel” was the &lt;strong&gt;thinnest&lt;/strong&gt; I could find. Thinner is better.&lt;/p&gt;

&lt;p&gt;There are also some bolts and “loaded washers” (or something like that) that I believe are size #10. Not pictured are some steel rods of the same size that will be used as a stem.&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Procedure&lt;/h2&gt;

&lt;p&gt;Since I’d done this before, it made sense to use a template to trace out the flower stencil to speed things up. Just tried to cut out a circle in cardboard and eyeball 5 even petals. Then I traced out the stencil with a dry-erase marker on each square.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/flower/template.jpg&quot; alt=&quot;metal flower template&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cut those squares into flower shapes with shears. Then use the Dremel to round off the petals’ edges and remove sharp edges. I suppose this could be skipped if you shear them well and don’t mind if there are sharp areas. Sorry, no pictures of this.&lt;/p&gt;

&lt;p&gt;Before shaping the petals, drill a hole in the middle of each one. Match the size of your rods.&lt;/p&gt;

&lt;p&gt;Now “shape” these stenciled-out petals! I just used needle nose plyers for this - they work great. I don’t know if there’s a way to describe this easily. Look at the final flower though, and let that guide you. You’ll want to bend the edges of the petals downard, but bend the whole petals upwards. Whichever set of petals will be at the top should be bent almost upright. For these, curve them inwards as well as the inside of a flower looks. This is where the issue with using steel came up. Shaping the petals edges was fine, but when I tried to curve the inner most petals, I accidnetally made distinct bends that showed. When I used copper, it was easy to curve them uniformly. When the flower was all put together, I think it looks fine, but copper did contour better, and I suspect aluminum would too.&lt;/p&gt;

&lt;p&gt;Now place a bolt and washer on the end of a rod. Give enough space for the three sets of petals and another screw. A little extra room doesn’t hurt - it’ll be mostly hidden. Cap with another washer and bolt. The first time I did it I didn’t use these, and the bolts would slip. The washers really help.&lt;/p&gt;

&lt;p&gt;Anyway, get those tight. Now continue shaping the petals until it looks like a flower! It doesn’t take much.&lt;/p&gt;

&lt;p&gt;I also added a leaf, but I don’t have any pics and can give some insight into making those later if anyone wants. Ended up soddering this somewhat since the steel was difficult to “wrap”, unlike the copper one I made originally.&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Finished&lt;/h2&gt;

&lt;p&gt;Let me know how it goes, and I’m happy to answer any questions. Here are some more pics:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/flower/some-angle.jpg&quot; alt=&quot;Post Sample Image&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/flower/uppy.jpg&quot; alt=&quot;Post Sample Image&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Some pictures of the copper version&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/flower/older/copper1.jpg&quot; alt=&quot;copper flower&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;So coooool&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/flower/older/copper2.jpg&quot; alt=&quot;copper flower&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 19 May 2015 05:00:00 -0700</pubDate>
        <link>http://damien.la/2015/05/19/metal-flowers</link>
        <guid isPermaLink="true">http://damien.la/2015/05/19/metal-flowers</guid>
        
        
      </item>
    
      <item>
        <title>'initializing' hashes in ruby - autovivification</title>
        <description>&lt;p&gt;TL;DR: &lt;code&gt;hash = Hash.new { |h, k| h[k] = 0 }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I’ve often needed to count or sum over a set of data. Daily sales, weekly user sign ups, and in my most recent project, monthly work units per employee. Here’s an example of summing number of orders per day:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;NoMethodError: undefined method `+' for nil:NilClass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This sucks because it’s such a frequently needed action. I don’t want to write in extraneous code to set the expected key values to 0. And I finally found a solution.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;{&quot;2015-5-14&quot;=&amp;gt;&lt;/span&gt;10, &lt;span class=&quot;s2&quot;&gt;&quot;2015-5-15&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;2, &lt;span class=&quot;s2&quot;&gt;&quot;2015-5-16&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;7&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Autovivification&quot;&gt;autovivification&lt;/a&gt;, which apparently comes from Perl. And it’s awesome. Any key’s value can have a default value set. Here’s another example that comes up a lot for me:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;NoMethodError: undefined method `[]' for nil:NilClass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, we can set the default value for keys to another hash, which lets us assign values for nested keys immediately.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;advanced-ruby-hash-techniques&quot;&gt;Advanced Ruby Hash Techniques&lt;/h4&gt;

&lt;p&gt;Here’s an awesome resource I found from Hacker News. It covers autovivification but has some other cool tricks too:
&lt;a href=&quot;http://blog.honeybadger.io/advanced-ruby-hash-techniques/&quot;&gt;blog.honeybadger.io/advanced-ruby-hash-techniques&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 17 May 2015 05:00:00 -0700</pubDate>
        <link>http://damien.la/2015/05/17/autovivification</link>
        <guid isPermaLink="true">http://damien.la/2015/05/17/autovivification</guid>
        
        
      </item>
    
      <item>
        <title>modding my Nexus 4 with Cyanogenmod and enabling LTE</title>
        <description>&lt;h6&gt;Disclaimer: You probably won't do any permanent damage to your phone (but don't take my word for it) if you do anything wrong here, but you can waste a lot of time and get very frustrated. I've modded 4 different androids many times over the last 5 years or so, and I've never bricked a phone.
&lt;/h6&gt;
&lt;p&gt;I modded my Nexus 4 (‘Mako’ is the codename for it) today, switching to Cyanogen 10.2 and enabling LTE.&lt;/p&gt;

&lt;p&gt;Speedtest.net results:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;LTE:
17.95 Mbps download   19.52 Mbps upload

CDMA:
4.21  Mbps download    2.09  Mbps upload&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I want to get the steps down in writing to help others do the same and future me when I need to reformat my phone. There no single solution to getting this done, so I’ll describe the process I took. I did this using Windows 7, but most of the steps should be similar regardless of the OS.&lt;/p&gt;

&lt;p&gt;1) Tools that are included in the latest &lt;a href=&quot;http://developer.android.com/sdk/index.html&quot;&gt;Android SDK (adt bundle)&lt;/a&gt;, called adb and fastboot, are necessary to access the phone. Unzip wherever.&lt;/p&gt;

&lt;p&gt;2) If you haven’t enabled Developer Mode on your phone, you’ll have to in order to enable USB debugging. Go to Settings and click “Build number” 7 times. You’ll see a visual confirmation. Now enable USB debugging.&lt;/p&gt;

&lt;p&gt;3) Even getting your computer to recognize your Nexus 4 can be a pain sometimes. If you have issues with Windows, uninstall the current drivers through the device manager, and install this driver. If that link breaks, &lt;a href=&quot;http://forum.xda-developers.com/showthread.php?t=1992345&quot;&gt;here is the forum post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Make sure to add the whatever Cyanogenmod (we’ll call it CM hereon), Google apps, radio zips to your phone’s &lt;code&gt;/sdcard/&lt;/code&gt; directory (whether a real sdcard or on the internal memory). Plug your phone by USB into your computer and either drag and drop files or use the adb “push” commands (in the ‘platform-tools’ directory of the Android SDK you installed). Sample command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;adb push cm-10.2.zip /sdcard/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;4a) If you want CM with LTE enabled, &lt;a href=&quot;http://d-h.st/users/negroplasty/?fld_id=22218#files&quot;&gt;go here&lt;/a&gt; (10.2 is latest stable version as of this post).&lt;/p&gt;

&lt;p&gt;And &lt;a href=&quot;http://forum.xda-developers.com/showthread.php?t=2267890&quot;&gt;get a radio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mmultiple choices here under “Resources”, but I used the .33-.84 Hybrid radio, and it’s working fine so far. Others have reported the other radios working too.&lt;/p&gt;

&lt;p&gt;4b) OR for the standard CM, &lt;a href=&quot;http://download.cyanogenmod.org/?device=mako&amp;amp;type=&quot;&gt;get it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And &lt;a href=&quot;http://forum.xda-developers.com/showpost.php?p=44719035&amp;amp;postcount=3621&quot;&gt;get a radio in case Wifi/Bluetooth&lt;/a&gt; don’t work (mine didn’t by default).&lt;/p&gt;

&lt;p&gt;5) Get &lt;a href=&quot;http://wiki.cyanogenmod.org/w/Google_Apps&quot;&gt;Google apps&lt;/a&gt; (make sure to match to appropriate CM version):&lt;/p&gt;

&lt;p&gt;6) Also get the &lt;a href=&quot;http://download2.clockworkmod.com/recoveries/recovery-clockwork-6.0.4.3-mako.img&quot;&gt;ClockwordMod Recovery image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I made sure to take whatever I wanted to off my phone before doing this, so make sure you back up whatever you want. I have no recommendations for how to do this, but there are tools out there.&lt;/p&gt;

&lt;p&gt;7) Now with your phone connected by USB to your computer, run this command from the terminal:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;adb reboot bootloader&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;8) This will boot the phone into the bootloader screen. FYI, in general, volume up and down control direction and the power button selects.
Now in your terminal, you’ll want to unlock the phone (visually confirmed). I believe this step wipes the phone:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;fastboot oem unlock&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;8) Restart the phone if it didn’t already. You may need to re-enable USB debugging.
Now get to the bootloader screen again. Make sure the ClockwordMod Recovery image is in the same directory as the adb and fastboot (makes it easier) and run these two commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;fastboot flash recovery recovery-clockwork-6.0.4.3-mako.img

fastboot boot recovery-clockwork-6.0.4.3-mako.img&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;9) Now you should be in the CWM Recovery screen.
Choose to factory wipe / reset your phone.
Now choose to install a zip and navigate to the sdcard and to the &lt;code&gt;/0/&lt;/code&gt; directory or wherever you put your zips.&lt;/p&gt;

&lt;p&gt;10) Install the CM zip first. Then the Google apps zip. Then the radio zip.&lt;/p&gt;

&lt;p&gt;Now restart your phone! If you chose the LTE enabled CM, there are just a few more steps - otherwise, you’re done!&lt;/p&gt;

&lt;p&gt;11) Don’t worry if your signal bars look different now or have a weaker signal. Go to the phone dialer and enter:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;*#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#4636#*#*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Go to Phone Information, and select “LTE/GSM/CDMA auto” from the drop-down menu.&lt;/p&gt;

&lt;p&gt;12) Lastly, navigate to Settings &amp;gt; More &amp;gt; Mobile Networks &amp;gt; Access Point Names, and choose this network configuration:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;APN   fast.t-mobile.com
MMSC  http://mms.msg.eng.t-mobile.com/mms/wapenc
MCC   3109
MNC   260
APN   type default, supl, mms
APN   protocol IPv4/IPv6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can create a new one or modify the IPv6 version to include the IPv4/IPv6 option. Remember to hit save.&lt;/p&gt;

&lt;p&gt;You should be good to go!&lt;/p&gt;

&lt;p&gt;I JUST did this process myself, so I have no feedback about bugs or if this helped or hurt my Nexus 4 experience. Will try to remember to update. Let me know about your experiences! : )&lt;/p&gt;

</description>
        <pubDate>Tue, 24 Dec 2013 04:00:00 -0800</pubDate>
        <link>http://damien.la/2013/12/24/modding-nexus</link>
        <guid isPermaLink="true">http://damien.la/2013/12/24/modding-nexus</guid>
        
        
      </item>
    
      <item>
        <title>0.00,1 - Using Comman Separation on the Other Side</title>
        <description>&lt;p&gt;Try reading this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.000009
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It has 5 zeroes. Counting these is tedious, especially with even smaller numbers. That is a millionth though. Or a micro- something. Try a number over 1, like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;900000.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that’d be inefficient too. But we fix this with comma separation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;90,000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ninety thousand is discerned much faster like this. The separation of the 5 zeroes into a set of 2 and 3 allows this. So why not apply this to any number n, where &lt;code&gt;1 &amp;gt; |n| &amp;gt; 0 ?&lt;/code&gt; Using my previous example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.00,000,9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes it easy to see that the value is a millionth. Note that the first comma separates only the 10th and 100th places. W/o doing this, the value wouldn’t reflect the ‘larger than 1’ corresponding value. I find it faster to use this technique over having to mentally rearrange the last comma each time.&lt;/p&gt;

&lt;p&gt;Don’t let the asymmetry bother you. The one’s place is really the ‘center’, and the decimal that represents values less than 1 is arbitrary.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Dec 2007 08:00:00 -0800</pubDate>
        <link>http://damien.la/2007/12/10/comma-separation</link>
        <guid isPermaLink="true">http://damien.la/2007/12/10/comma-separation</guid>
        
        
      </item>
    
  </channel>
</rss>
